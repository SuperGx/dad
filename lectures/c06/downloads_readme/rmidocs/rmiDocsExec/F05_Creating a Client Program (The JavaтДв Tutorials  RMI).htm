<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0055)http://java.sun.com/docs/books/tutorial/rmi/client.html -->
<HTML><HEAD><TITLE>Creating a Client Program (The Java™ Tutorials > RMI)</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<STYLE type=text/css>.FigureCaption {
	FONT-SIZE: smaller; MARGIN-LEFT: 1in; MARGIN-RIGHT: 1in; FONT-FAMILY: sans-serif; TEXT-ALIGN: justify
}
#TopBar_bl {
	BACKGROUND: url(../images/java_bar_bl.gif) no-repeat 0px 100%; WIDTH: 100%; HEIGHT: 60px
}
#TopBar_br {
	BACKGROUND: url(../images/java_bar_br.gif) no-repeat 100% 100%; WIDTH: 100%; HEIGHT: 60px
}
#TopBar_tl {
	BACKGROUND: url(../images/java_bar_tl.gif) no-repeat 0px 0px; WIDTH: 100%; HEIGHT: 60px
}
#TopBar_tr {
	BACKGROUND: url(../images/java_bar_tr.gif) no-repeat 100% 0px; WIDTH: 100%; HEIGHT: 60px
}
#TopBar {
	FONT-WEIGHT: bold; BACKGROUND: url(../images/java_bar.gif) #35556b; MARGIN: 10px 10px 0px; COLOR: white; FONT-FAMILY: sans-serif; HEIGHT: 60px; min-width: 700px
}

@media Print    
{
#BreadCrumbs {
	DISPLAY: none
}
#Download {
	DISPLAY: none
}
    }
#TopBar_right {
	PADDING-RIGHT: 30px; FLOAT: right; LINE-HEIGHT: 14px; PADDING-TOP: 2px; TEXT-ALIGN: center
}

@media Print    
{
#TopBar_right {
	DISPLAY: none
}
    }
#TopBar_right A {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; FONT-SIZE: 12px; PADDING-BOTTOM: 0px; MARGIN: 3px; PADDING-TOP: 0px
}
#TopBar A:visited {
	COLOR: white; TEXT-DECORATION: none
}
#TopBar A:link {
	COLOR: white; TEXT-DECORATION: none
}
#TopBar A:hover {
	COLOR: #35556b; BACKGROUND-COLOR: white
}
#TopBar A:active {
	COLOR: #35556b; BACKGROUND-COLOR: white
}
#BreadCrumbs {
	PADDING-RIGHT: 5px; PADDING-LEFT: 0px; FLOAT: right; PADDING-BOTTOM: 0.5em; PADDING-TOP: 4px; FONT-FAMILY: sans-serif
}
#BreadCrumbs A {
	COLOR: blue
}
#BreadCrumbs A:visited {
	TEXT-DECORATION: none
}
#BreadCrumbs A:link {
	TEXT-DECORATION: none
}
#BreadCrumbs A:hover {
	TEXT-DECORATION: underline
}
#BreadCrumbs A:active {
	TEXT-DECORATION: underline
}
#PageTitle {
	FONT-WEIGHT: bold; FONT-SIZE: 20px; MARGIN: 0px 5px 0.5em 0px; COLOR: #e76f00; FONT-FAMILY: sans-serif
}
.LeftBar_shown {
	MARGIN-TOP: 4px; FLOAT: left; MARGIN-BOTTOM: 2em; MARGIN-LEFT: 10px; WIDTH: 13em
}

@media Print    
{
.LeftBar_shown {
	DISPLAY: none
}
    }
.LeftBar_hidden {
	DISPLAY: none
}
#Footer {
	PADDING-LEFT: 10px; MARGIN-RIGHT: 10px; PADDING-TOP: 10px
}
.NavBit {
	PADDING-RIGHT: 5px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0.5em; PADDING-TOP: 4px; FONT-FAMILY: sans-serif
}

@media Print    
{
.NavBit {
	DISPLAY: none
}
    }
#TagNotes {
	FONT-SIZE: smaller; FONT-FAMILY: sans-serif; TEXT-ALIGN: right
}

@media Print    
{
#TagNotes A:visited {
	COLOR: #35556b; TEXT-DECORATION: none
}
#TagNotes A:link {
	COLOR: #35556b; TEXT-DECORATION: none
}
    }
#Contents A {
	COLOR: blue
}
.NavBit A {
	COLOR: blue
}
#TagNotes A {
	COLOR: blue
}
#TagNotes A:visited {
	TEXT-DECORATION: none
}
#TagNotes A:link {
	TEXT-DECORATION: none
}
#Contents A:visited {
	TEXT-DECORATION: none
}
#Contents A:link {
	TEXT-DECORATION: none
}
.NavBit A:visited {
	TEXT-DECORATION: none
}
.NavBit A:link {
	TEXT-DECORATION: none
}
#TagNotes A:hover {
	TEXT-DECORATION: underline
}
#TagNotes A:active {
	TEXT-DECORATION: underline
}
#Contents A:hover {
	TEXT-DECORATION: underline
}
#Contents A:active {
	TEXT-DECORATION: underline
}
.NavBit A:hover {
	TEXT-DECORATION: underline
}
.NavBit A:active {
	TEXT-DECORATION: underline
}
#Contents {
	FLOAT: left; FONT-FAMILY: sans-serif
}

@media Print    
{
#Contents {
	DISPLAY: none
}

}

@media Screen    
{
DIV.PrintHeaders {
	DISPLAY: none
}
    }
.linkLESSON {
	MARGIN-LEFT: 0.5em; TEXT-INDENT: -0.5em
}
.nolinkLESSON {
	MARGIN-LEFT: 0.5em; TEXT-INDENT: -0.5em
}
.linkAHEAD {
	MARGIN-LEFT: 1.5em; TEXT-INDENT: -0.5em
}
.nolinkAHEAD {
	MARGIN-LEFT: 1.5em; TEXT-INDENT: -0.5em
}
.linkQUESTIONS {
	MARGIN-LEFT: 1.5em; TEXT-INDENT: -0.5em
}
.nolinkQUESTIONS {
	MARGIN-LEFT: 1.5em; TEXT-INDENT: -0.5em
}
.linkBHEAD {
	MARGIN-LEFT: 2.5em; TEXT-INDENT: -0.5em
}
.nolinkBHEAD {
	MARGIN-LEFT: 2.5em; TEXT-INDENT: -0.5em
}
.linkCHEAD {
	MARGIN-LEFT: 3.5em; TEXT-INDENT: -0.5em
}
.nolinkCHEAD {
	MARGIN-LEFT: 3.5em; TEXT-INDENT: -0.5em
}
.nolinkLESSON {
	FONT-WEIGHT: bold; COLOR: #e76f00
}
.nolinkAHEAD {
	FONT-WEIGHT: bold; COLOR: #e76f00
}
.nolinkBHEAD {
	FONT-WEIGHT: bold; COLOR: #e76f00
}
.nolinkCHEAD {
	FONT-WEIGHT: bold; COLOR: #e76f00
}
.nolinkQUESTIONS {
	FONT-WEIGHT: bold; COLOR: #e76f00
}
.MainFlow_indented {
	MARGIN-BOTTOM: 2em; MARGIN-LEFT: 15em; MARGIN-RIGHT: 10px
}
.MainFlow_wide {
	MARGIN-BOTTOM: 2em; MARGIN-LEFT: 10px; MARGIN-RIGHT: 10px
}

@media Print    
{
.MainFlow_indented {
	MARGIN-TOP: 10px; MARGIN-LEFT: 0px; MARGIN-RIGHT: 10px; PADDING-TOP: 0px
}
.MainFlow_wide {
	MARGIN-TOP: 10px; MARGIN-LEFT: 0px; MARGIN-RIGHT: 10px; PADDING-TOP: 0px
}
    }
H3 {
	COLOR: #e76f00; FONT-FAMILY: sans-serif
}
H4 {
	COLOR: #e76f00; FONT-FAMILY: sans-serif
}
H5 {
	COLOR: #e76f00; FONT-FAMILY: sans-serif
}
#ToggleLeft {
	DISPLAY: none
}
</STYLE>

<SCRIPT type=text/javascript>
    function leftBar() {
        var nameq = 'tutorial_showLeftBar='
        var cookies = document.cookie.split(';');
        for (var i = 0; i < cookies.length; i++) {
            var cookieString = cookies[i];
            while (cookieString.charAt(0) == ' ') {
                cookieString = cookieString.substring(1, cookieString.length);
            }
            if (cookieString.indexOf(nameq) == 0) {
                cookieValue =  cookieString.substring(nameq.length,
                        cookieString.length);
                return cookieValue == 'yes';
            }
        }
        return true;
    }

    function showLeft(b) {
        var contents = document.getElementById("LeftBar");
        var main = document.getElementById("MainFlow");
        var toggle = document.getElementById("ToggleLeft");
        if (b) {
            contents.className = "LeftBar_shown";
            main.className = "MainFlow_indented";
            toggle.innerHTML = "Hide the TOC";
            document.cookie = 'tutorial_showLeftBar=yes; path=/';
        } else {
            contents.className = "LeftBar_hidden";
            main.className = "MainFlow_wide";
            toggle.innerHTML = "Show the TOC";
            document.cookie = 'tutorial_showLeftBar=no; path=/';
        }
    }

    function toggleLeft() {
        showLeft(document.getElementById("LeftBar").className ==
                "LeftBar_hidden");
        document.getElementById("ToggleLeft").blur();
    }

    function load() {
        showLeft(leftBar());
        document.getElementById("ToggleLeft").style.display="inline";
    }
    
</SCRIPT>

<META content="MSHTML 6.00.2900.3492" name=GENERATOR></HEAD>
<BODY onload=load()>
<DIV id=TopBar>
<DIV id=TopBar_tr>
<DIV id=TopBar_tl>
<DIV id=TopBar_br>
<DIV id=TopBar_bl>
<DIV id=TopBar_right><A href="http://java.sun.com/javase/6/download.jsp" 
target=_blank>Download the JDK</A> <BR><A 
href="http://java.sun.com/docs/books/tutorial/search.html" target=_blank>Search 
the Tutorials</A> <BR><A id=ToggleLeft href="javascript:toggleLeft()">Hide the 
TOC</A> </DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class=PrintHeaders><B>Trail:</B> RMI </DIV>
<DIV class=LeftBar_shown id=LeftBar>
<DIV id=Contents>
<DIV class=linkAHEAD><A 
href="http://java.sun.com/docs/books/tutorial/rmi/overview.html">An Overview of 
RMI Applications</A></DIV>
<DIV class=linkAHEAD><A 
href="http://java.sun.com/docs/books/tutorial/rmi/server.html">Writing an RMI 
Server</A></DIV>
<DIV class=linkBHEAD><A 
href="http://java.sun.com/docs/books/tutorial/rmi/designing.html">Designing a 
Remote Interface</A></DIV>
<DIV class=linkBHEAD><A 
href="http://java.sun.com/docs/books/tutorial/rmi/implementing.html">Implementing 
a Remote Interface</A></DIV>
<DIV class=nolinkAHEAD>Creating a Client Program</DIV>
<DIV class=linkAHEAD><A 
href="http://java.sun.com/docs/books/tutorial/rmi/example.html">Compiling and 
Running the Example</A></DIV>
<DIV class=linkBHEAD><A 
href="http://java.sun.com/docs/books/tutorial/rmi/compiling.html">Compiling the 
Example Programs</A></DIV>
<DIV class=linkBHEAD><A 
href="http://java.sun.com/docs/books/tutorial/rmi/running.html">Running the 
Example Programs</A></DIV></DIV></DIV>
<DIV class=MainFlow_indented id=MainFlow><SPAN id=BreadCrumbs><A 
href="http://java.sun.com/docs/books/tutorial/index.html" target=_top>Home 
Page</A> &gt; <A href="http://java.sun.com/docs/books/tutorial/rmi/index.html" 
target=_top>RMI</A> </SPAN>
<DIV class=NavBit><A 
href="http://java.sun.com/docs/books/tutorial/rmi/implementing.html" 
target=_top>«&nbsp;Previous</A>&nbsp;•&nbsp;<A 
href="http://java.sun.com/docs/books/tutorial/rmi/TOC.html" 
target=_top>Trail</A>&nbsp;•&nbsp;<A 
href="http://java.sun.com/docs/books/tutorial/rmi/example.html" 
target=_top>Next&nbsp;»</A> </DIV>
<DIV id=PageTitle>Creating a Client Program</DIV>
<BLOCKQUOTE>The compute engine is a relatively simple program: it runs tasks 
  that are handed to it. The clients for the compute engine are more complex. A 
  client needs to call the compute engine, but it also has to define the task to 
  be performed by the compute engine. 
  <P>Two separate classes make up the client in our example. The first class, 
  <CODE>ComputePi</CODE>, looks up and invokes a <CODE>Compute</CODE> object. 
  The second class, <CODE>Pi</CODE>, implements the <CODE>Task</CODE> interface 
  and defines the work to be done by the compute engine. The job of the 
  <CODE>Pi</CODE> class is to compute the value of <IMG height=9 alt="" 
  src="F05_Creating a Client Program (The Java™ Tutorials  RMI)_files/pi.gif" 
  width=9> to some number of decimal places. 
  <P>The non-remote <A class=SourceLink 
  href="http://java.sun.com/docs/books/tutorial/rmi/examples/compute/Task.java" 
  target=_blank><CODE><CODE>Task</CODE></CODE></A> interface is defined as 
  follows: 
  <BLOCKQUOTE><PRE>package compute;

public interface Task&lt;T&gt; {
    T execute();
}
</PRE></BLOCKQUOTE>
  <P>The code that invokes a <CODE>Compute</CODE> object's methods must obtain a 
  reference to that object, create a <CODE>Task</CODE> object, and then request 
  that the task be executed. The definition of the task class <CODE>Pi</CODE> is 
  shown later. A <CODE>Pi</CODE> object is constructed with a single argument, 
  the desired precision of the result. The result of the task execution is a 
  <CODE>java.math.BigDecimal</CODE> representing <IMG height=9 alt="" 
  src="F05_Creating a Client Program (The Java™ Tutorials  RMI)_files/pi.gif" 
  width=9> calculated to the specified precision. 
  <P>Here is the source code for <A class=SourceLink 
  href="http://java.sun.com/docs/books/tutorial/rmi/examples/client/ComputePi.java" 
  target=_blank><CODE><CODE>client.ComputePi</CODE></CODE></A>, the main client 
  class: 
  <BLOCKQUOTE><PRE>package client;

import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.math.BigDecimal;
import compute.Compute;

public class ComputePi {
    public static void main(String args[]) {
        if (System.getSecurityManager() == null) {
            System.setSecurityManager(new SecurityManager());
        }
        try {
            String name = "Compute";
            Registry registry = LocateRegistry.getRegistry(args[0]);
            Compute comp = (Compute) registry.lookup(name);
            Pi task = new Pi(Integer.parseInt(args[1]));
            BigDecimal pi = comp.executeTask(task);
            System.out.println(pi);
        } catch (Exception e) {
            System.err.println("ComputePi exception:");
            e.printStackTrace();
        }
    }    
}
</PRE></BLOCKQUOTE>
  <P>Like the <CODE>ComputeEngine</CODE> server, the client begins by installing 
  a security manager. This step is necessary because the process of receiving 
  the server remote object's stub could require downloading class definitions 
  from the server. For RMI to download classes, a security manager must be in 
  force. 
  <P>After installing a security manager, the client constructs a name to use to 
  look up a <CODE>Compute</CODE> remote object, using the same name used by 
  <CODE>ComputeEngine</CODE> to bind its remote object. Also, the client uses 
  the <CODE>LocateRegistry.getRegistry</CODE> API to synthesize a remote 
  reference to the registry on the server's host. The value of the first 
  command-line argument, <CODE>args[0]</CODE>, is the name of the remote host on 
  which the <CODE>Compute</CODE> object runs. The client then invokes the 
  <CODE>lookup</CODE> method on the registry to look up the remote object by 
  name in the server host's registry. The particular overload of 
  <CODE>LocateRegistry.getRegistry</CODE> used, which has a single 
  <CODE>String</CODE> parameter, returns a reference to a registry at the named 
  host and the default registry port, 1099. You must use an overload that has an 
  <CODE>int</CODE> parameter if the registry is created on a port other than 
  1099. 
  <P>Next, the client creates a new <CODE>Pi</CODE> object, passing to the 
  <CODE>Pi</CODE> constructor the value of the second command-line argument, 
  <CODE>args[1]</CODE>, parsed as an integer. This argument indicates the number 
  of decimal places to use in the calculation. Finally, the client invokes the 
  <CODE>executeTask</CODE> method of the <CODE>Compute</CODE> remote object. The 
  object passed into the <CODE>executeTask</CODE> invocation returns an object 
  of type <CODE>BigDecimal</CODE>, which the program stores in the variable 
  <CODE>result</CODE>. Finally, the program prints the result. The following 
  figure depicts the flow of messages among the <CODE>ComputePi</CODE> client, 
  the <CODE>rmiregistry</CODE>, and the <CODE>ComputeEngine</CODE>. 
  <P>
  <CENTER><IMG height=117 alt="" 
  src="F05_Creating a Client Program (The Java™ Tutorials  RMI)_files/rmi-4.gif" 
  width=329 align=bottom></CENTER>
  <P></P>
  <P>The <CODE>Pi</CODE> class implements the <CODE>Task</CODE> interface and 
  computes the value of <IMG height=9 alt="" 
  src="F05_Creating a Client Program (The Java™ Tutorials  RMI)_files/pi.gif" 
  width=9> to a specified number of decimal places. For this example, the actual 
  algorithm is unimportant. What is important is that the algorithm is 
  computationally expensive, meaning that you would want to have it executed on 
  a capable server. 
  <P>Here is the source code for <A class=SourceLink 
  href="http://java.sun.com/docs/books/tutorial/rmi/examples/client/Pi.java" 
  target=_blank><CODE><CODE>client.Pi</CODE></CODE></A>, the class that 
  implements the <CODE>Task</CODE> interface: 
  <BLOCKQUOTE><PRE>package client;

import compute.Task;
import java.io.Serializable;
import java.math.BigDecimal;

public class Pi implements Task&lt;BigDecimal&gt;, Serializable {

    private static final long serialVersionUID = 227L;

    /** constants used in pi computation */
    private static final BigDecimal FOUR =
        BigDecimal.valueOf(4);

    /** rounding mode to use during pi computation */
    private static final int roundingMode = 
        BigDecimal.ROUND_HALF_EVEN;

    /** digits of precision after the decimal point */
    private final int digits;
    
    /**
     * Construct a task to calculate pi to the specified
     * precision.
     */
    public Pi(int digits) {
        this.digits = digits;
    }

    /**
     * Calculate pi.
     */
    public BigDecimal execute() {
        return computePi(digits);
    }

    /**
     * Compute the value of pi to the specified number of 
     * digits after the decimal point.  The value is 
     * computed using Machin's formula:
     *
     *          pi/4 = 4*arctan(1/5) - arctan(1/239)
     *
     * and a power series expansion of arctan(x) to 
     * sufficient precision.
     */
    public static BigDecimal computePi(int digits) {
        int scale = digits + 5;
        BigDecimal arctan1_5 = arctan(5, scale);
        BigDecimal arctan1_239 = arctan(239, scale);
        BigDecimal pi = arctan1_5.multiply(FOUR).subtract(
                                  arctan1_239).multiply(FOUR);
        return pi.setScale(digits, 
                           BigDecimal.ROUND_HALF_UP);
    }
    /**
     * Compute the value, in radians, of the arctangent of 
     * the inverse of the supplied integer to the specified
     * number of digits after the decimal point.  The value
     * is computed using the power series expansion for the
     * arc tangent:
     *
     * arctan(x) = x - (x^3)/3 + (x^5)/5 - (x^7)/7 + 
     *     (x^9)/9 ...
     */   
    public static BigDecimal arctan(int inverseX, 
                                    int scale) 
    {
        BigDecimal result, numer, term;
        BigDecimal invX = BigDecimal.valueOf(inverseX);
        BigDecimal invX2 = 
            BigDecimal.valueOf(inverseX * inverseX);

        numer = BigDecimal.ONE.divide(invX,
                                      scale, roundingMode);

        result = numer;
        int i = 1;
        do {
            numer = 
                numer.divide(invX2, scale, roundingMode);
            int denom = 2 * i + 1;
            term = 
                numer.divide(BigDecimal.valueOf(denom),
                             scale, roundingMode);
            if ((i % 2) != 0) {
                result = result.subtract(term);
            } else {
                result = result.add(term);
            }
            i++;
        } while (term.compareTo(BigDecimal.ZERO) != 0);
        return result;
    }
}
</PRE></BLOCKQUOTE>
  <P>Note that all serializable classes, whether they implement the 
  <CODE>Serializable</CODE> interface directly or indirectly, must declare a 
  <CODE>private</CODE> <CODE>static</CODE> <CODE>final</CODE> field named 
  <CODE>serialVersionUID</CODE> to guarantee serialization compatibility between 
  versions. If no previous version of the class has been released, then the 
  value of this field can be any <CODE>long</CODE> value, similar to the 
  <CODE>227L</CODE> used by <CODE>Pi</CODE>, as long as the value is used 
  consistently in future versions. If a previous version of the class has been 
  released without an explicit <CODE>serialVersionUID</CODE> declaration, but 
  serialization compatibility with that version is important, then the default 
  implicitly computed value for the previous version must be used for the value 
  of the new version's explicit declaration. The <CODE>serialver</CODE> tool can 
  be run against the previous version to determine the default computed value 
  for it. 
  <P>The most interesting feature of this example is that the 
  <CODE>Compute</CODE> implementation object never needs the <CODE>Pi</CODE> 
  class's definition until a <CODE>Pi</CODE> object is passed in as an argument 
  to the <CODE>executeTask</CODE> method. At that point, the code for the class 
  is loaded by RMI into the <CODE>Compute</CODE> object's Java virtual machine, 
  the <CODE>execute</CODE> method is invoked, and the task's code is executed. 
  The result, which in the case of the <CODE>Pi</CODE> task is a 
  <CODE>BigDecimal</CODE> object, is handed back to the calling client, where it 
  is used to print the result of the computation. 
  <P>The fact that the supplied <CODE>Task</CODE> object computes the value of 
  <CODE>Pi</CODE> is irrelevant to the <CODE>ComputeEngine</CODE> object. You 
  could also implement a task that, for example, generates a random prime number 
  by using a probabilistic algorithm. That task would also be computationally 
  intensive and therefore a good candidate for passing to the 
  <CODE>ComputeEngine</CODE>, but it would require very different code. This 
  code could also be downloaded when the <CODE>Task</CODE> object is passed to a 
  <CODE>Compute</CODE> object. In just the way that the algorithm for computing 
  <IMG height=9 alt="" 
  src="F05_Creating a Client Program (The Java™ Tutorials  RMI)_files/pi.gif" 
  width=9> is brought in when needed, the code that generates the random prime 
  number would be brought in when needed. The <CODE>Compute</CODE> object knows 
  only that each object it receives implements the <CODE>execute</CODE> method. 
  The <CODE>Compute</CODE> object does not know, and does not need to know, what 
  the implementation does. </P></BLOCKQUOTE>
<DIV class=NavBit><A 
href="http://java.sun.com/docs/books/tutorial/rmi/implementing.html" 
target=_top>« Previous</A> • <A 
href="http://java.sun.com/docs/books/tutorial/rmi/TOC.html" 
target=_top>Trail</A> • <A 
href="http://java.sun.com/docs/books/tutorial/rmi/example.html" target=_top>Next 
»</A> </DIV></DIV>
<DIV id=Footer>
<HR>

<DIV id=TagNotes><FONT face=sans-serif size=1>Problems with the examples? Try <A 
href="http://java.sun.com/docs/books/tutorial/information/run-examples.html" 
target=_blank>Compiling and Running the Examples: FAQs</A>. <BR>Complaints? 
Compliments? Suggestions? <A 
href="http://developer.sun.com/contact/tutorial_feedback.jsp" target=_blank>Give 
us your feedback</A>. </FONT></DIV>
<DIV id=Footer>
<P><FONT face=sans-serif size=1><A name=license_info>Your use of this</A> page 
<A 
href="http://java.sun.com/docs/books/tutorial/">(http://java.sun.com/docs/books/tutorial</A> 
(Last Updated <A 
href="http://java.sun.com/docs/books/tutorial/information/history.html">2/14/2008</A>)) 
and all the material on pages under "The Java Tutorials" banner is subject to 
the <A href="http://developers.sun.com/global/termsofuse.html#g2_12">Terms of 
Use</A>. Additionally, (i) any example code contained in any of these Java 
Tutorials pages is also licensed under the <A 
href="http://developers.sun.com/license/berkeley_license.html">Code Sample 
License</A>, and (ii) the entire Java Tutorials content is available for 
download under the Java Tutorials Limited Non-Commercial License for limited, 
non-commercial individual and/or research and instructional use at <A 
href="https://cds.sun.com/is-bin/INTERSHOP.enfinity/WFS/CDS-CDS_Developer-Site/en_US/-/USD/ViewProductDetail-Start?ProductRef=tutorial-2008_03_14-oth-JPR@CDS-CDS_Developer">Sun 
Download Center</A>.</FONT></P><!--
-->
<TABLE cellSpacing=0 cellPadding=5 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="20%">
      <TABLE cellSpacing=0 cellPadding=5 width="100%" border=0>
        <TBODY>
        <TR>
          <TD align=middle><IMG id=duke height=55 
            src="F05_Creating a Client Program (The Java™ Tutorials  RMI)_files/DukeWave.gif" 
            width=55></TD>
          <TD vAlign=center align=left><IMG id=sun height=29 
            src="F05_Creating a Client Program (The Java™ Tutorials  RMI)_files/logo_sun_small_sdn.gif" 
            width=61></TD></TR></TBODY></TABLE></TD>
    <TD vAlign=center align=middle width="55%"><FONT color=#7e9cb1 size=1><A 
      href="http://developers.sun.com/global/aboutsun.html">About Sun</A> | <A 
      href="http://developers.sun.com/global/aboutsdn.html">About This Site</A> 
      | <A href="http://developers.sun.com/global/termsofuse.html">Terms of 
      Use</A> | <A 
      href="http://developers.sun.com/global/trademarks.html">Trademarks</A></FONT><FONT 
      color=#7e9cb1>&nbsp;</FONT> </TD>
    <TD vAlign=center align=right width="25%"><FONT color=#4b7592 
      size=2><STRONG>A Sun Developer Network Site</STRONG></FONT><BR><FONT 
      size=1><A 
      href="http://java.sun.com/docs/books/tutorial/information/copyright.html">Copyright</A></FONT> 
      <FONT color=#4b7592 size=2>1995-2008 Sun Microsystems, Inc.</FONT> 
  </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=PrintHeaders><B>Previous page:</B> Implementing a Remote Interface 
<BR><B>Next page:</B> Compiling and Running the Example </DIV>
<SCRIPT language=JavaScript 
src="F05_Creating a Client Program (The Java™ Tutorials  RMI)_files/s_code_remote.js"></SCRIPT>
</BODY></HTML>
