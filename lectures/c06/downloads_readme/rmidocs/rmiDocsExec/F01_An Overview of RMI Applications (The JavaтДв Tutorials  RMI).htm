<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0057)http://java.sun.com/docs/books/tutorial/rmi/overview.html -->
<HTML><HEAD><TITLE>An Overview of RMI Applications (The Java™ Tutorials > RMI)</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<STYLE type=text/css>.FigureCaption {
	FONT-SIZE: smaller; MARGIN-LEFT: 1in; MARGIN-RIGHT: 1in; FONT-FAMILY: sans-serif; TEXT-ALIGN: justify
}
#TopBar_bl {
	BACKGROUND: url(../images/java_bar_bl.gif) no-repeat 0px 100%; WIDTH: 100%; HEIGHT: 60px
}
#TopBar_br {
	BACKGROUND: url(../images/java_bar_br.gif) no-repeat 100% 100%; WIDTH: 100%; HEIGHT: 60px
}
#TopBar_tl {
	BACKGROUND: url(../images/java_bar_tl.gif) no-repeat 0px 0px; WIDTH: 100%; HEIGHT: 60px
}
#TopBar_tr {
	BACKGROUND: url(../images/java_bar_tr.gif) no-repeat 100% 0px; WIDTH: 100%; HEIGHT: 60px
}
#TopBar {
	FONT-WEIGHT: bold; BACKGROUND: url(../images/java_bar.gif) #35556b; MARGIN: 10px 10px 0px; COLOR: white; FONT-FAMILY: sans-serif; HEIGHT: 60px; min-width: 700px
}

@media Print    
{
#BreadCrumbs {
	DISPLAY: none
}
#Download {
	DISPLAY: none
}
    }
#TopBar_right {
	PADDING-RIGHT: 30px; FLOAT: right; LINE-HEIGHT: 14px; PADDING-TOP: 2px; TEXT-ALIGN: center
}

@media Print    
{
#TopBar_right {
	DISPLAY: none
}
    }
#TopBar_right A {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; FONT-SIZE: 12px; PADDING-BOTTOM: 0px; MARGIN: 3px; PADDING-TOP: 0px
}
#TopBar A:visited {
	COLOR: white; TEXT-DECORATION: none
}
#TopBar A:link {
	COLOR: white; TEXT-DECORATION: none
}
#TopBar A:hover {
	COLOR: #35556b; BACKGROUND-COLOR: white
}
#TopBar A:active {
	COLOR: #35556b; BACKGROUND-COLOR: white
}
#BreadCrumbs {
	PADDING-RIGHT: 5px; PADDING-LEFT: 0px; FLOAT: right; PADDING-BOTTOM: 0.5em; PADDING-TOP: 4px; FONT-FAMILY: sans-serif
}
#BreadCrumbs A {
	COLOR: blue
}
#BreadCrumbs A:visited {
	TEXT-DECORATION: none
}
#BreadCrumbs A:link {
	TEXT-DECORATION: none
}
#BreadCrumbs A:hover {
	TEXT-DECORATION: underline
}
#BreadCrumbs A:active {
	TEXT-DECORATION: underline
}
#PageTitle {
	FONT-WEIGHT: bold; FONT-SIZE: 20px; MARGIN: 0px 5px 0.5em 0px; COLOR: #e76f00; FONT-FAMILY: sans-serif
}
.LeftBar_shown {
	MARGIN-TOP: 4px; FLOAT: left; MARGIN-BOTTOM: 2em; MARGIN-LEFT: 10px; WIDTH: 13em
}

@media Print    
{
.LeftBar_shown {
	DISPLAY: none
}
    }
.LeftBar_hidden {
	DISPLAY: none
}
#Footer {
	PADDING-LEFT: 10px; MARGIN-RIGHT: 10px; PADDING-TOP: 10px
}
.NavBit {
	PADDING-RIGHT: 5px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0.5em; PADDING-TOP: 4px; FONT-FAMILY: sans-serif
}

@media Print    
{
.NavBit {
	DISPLAY: none
}
    }
#TagNotes {
	FONT-SIZE: smaller; FONT-FAMILY: sans-serif; TEXT-ALIGN: right
}

@media Print    
{
#TagNotes A:visited {
	COLOR: #35556b; TEXT-DECORATION: none
}
#TagNotes A:link {
	COLOR: #35556b; TEXT-DECORATION: none
}
    }
#Contents A {
	COLOR: blue
}
.NavBit A {
	COLOR: blue
}
#TagNotes A {
	COLOR: blue
}
#TagNotes A:visited {
	TEXT-DECORATION: none
}
#TagNotes A:link {
	TEXT-DECORATION: none
}
#Contents A:visited {
	TEXT-DECORATION: none
}
#Contents A:link {
	TEXT-DECORATION: none
}
.NavBit A:visited {
	TEXT-DECORATION: none
}
.NavBit A:link {
	TEXT-DECORATION: none
}
#TagNotes A:hover {
	TEXT-DECORATION: underline
}
#TagNotes A:active {
	TEXT-DECORATION: underline
}
#Contents A:hover {
	TEXT-DECORATION: underline
}
#Contents A:active {
	TEXT-DECORATION: underline
}
.NavBit A:hover {
	TEXT-DECORATION: underline
}
.NavBit A:active {
	TEXT-DECORATION: underline
}
#Contents {
	FLOAT: left; FONT-FAMILY: sans-serif
}

@media Print    
{
#Contents {
	DISPLAY: none
}

}

@media Screen    
{
DIV.PrintHeaders {
	DISPLAY: none
}
    }
.linkLESSON {
	MARGIN-LEFT: 0.5em; TEXT-INDENT: -0.5em
}
.nolinkLESSON {
	MARGIN-LEFT: 0.5em; TEXT-INDENT: -0.5em
}
.linkAHEAD {
	MARGIN-LEFT: 1.5em; TEXT-INDENT: -0.5em
}
.nolinkAHEAD {
	MARGIN-LEFT: 1.5em; TEXT-INDENT: -0.5em
}
.linkQUESTIONS {
	MARGIN-LEFT: 1.5em; TEXT-INDENT: -0.5em
}
.nolinkQUESTIONS {
	MARGIN-LEFT: 1.5em; TEXT-INDENT: -0.5em
}
.linkBHEAD {
	MARGIN-LEFT: 2.5em; TEXT-INDENT: -0.5em
}
.nolinkBHEAD {
	MARGIN-LEFT: 2.5em; TEXT-INDENT: -0.5em
}
.linkCHEAD {
	MARGIN-LEFT: 3.5em; TEXT-INDENT: -0.5em
}
.nolinkCHEAD {
	MARGIN-LEFT: 3.5em; TEXT-INDENT: -0.5em
}
.nolinkLESSON {
	FONT-WEIGHT: bold; COLOR: #e76f00
}
.nolinkAHEAD {
	FONT-WEIGHT: bold; COLOR: #e76f00
}
.nolinkBHEAD {
	FONT-WEIGHT: bold; COLOR: #e76f00
}
.nolinkCHEAD {
	FONT-WEIGHT: bold; COLOR: #e76f00
}
.nolinkQUESTIONS {
	FONT-WEIGHT: bold; COLOR: #e76f00
}
.MainFlow_indented {
	MARGIN-BOTTOM: 2em; MARGIN-LEFT: 15em; MARGIN-RIGHT: 10px
}
.MainFlow_wide {
	MARGIN-BOTTOM: 2em; MARGIN-LEFT: 10px; MARGIN-RIGHT: 10px
}

@media Print    
{
.MainFlow_indented {
	MARGIN-TOP: 10px; MARGIN-LEFT: 0px; MARGIN-RIGHT: 10px; PADDING-TOP: 0px
}
.MainFlow_wide {
	MARGIN-TOP: 10px; MARGIN-LEFT: 0px; MARGIN-RIGHT: 10px; PADDING-TOP: 0px
}
    }
H3 {
	COLOR: #e76f00; FONT-FAMILY: sans-serif
}
H4 {
	COLOR: #e76f00; FONT-FAMILY: sans-serif
}
H5 {
	COLOR: #e76f00; FONT-FAMILY: sans-serif
}
#ToggleLeft {
	DISPLAY: none
}
</STYLE>

<SCRIPT type=text/javascript>
    function leftBar() {
        var nameq = 'tutorial_showLeftBar='
        var cookies = document.cookie.split(';');
        for (var i = 0; i < cookies.length; i++) {
            var cookieString = cookies[i];
            while (cookieString.charAt(0) == ' ') {
                cookieString = cookieString.substring(1, cookieString.length);
            }
            if (cookieString.indexOf(nameq) == 0) {
                cookieValue =  cookieString.substring(nameq.length,
                        cookieString.length);
                return cookieValue == 'yes';
            }
        }
        return true;
    }

    function showLeft(b) {
        var contents = document.getElementById("LeftBar");
        var main = document.getElementById("MainFlow");
        var toggle = document.getElementById("ToggleLeft");
        if (b) {
            contents.className = "LeftBar_shown";
            main.className = "MainFlow_indented";
            toggle.innerHTML = "Hide the TOC";
            document.cookie = 'tutorial_showLeftBar=yes; path=/';
        } else {
            contents.className = "LeftBar_hidden";
            main.className = "MainFlow_wide";
            toggle.innerHTML = "Show the TOC";
            document.cookie = 'tutorial_showLeftBar=no; path=/';
        }
    }

    function toggleLeft() {
        showLeft(document.getElementById("LeftBar").className ==
                "LeftBar_hidden");
        document.getElementById("ToggleLeft").blur();
    }

    function load() {
        showLeft(leftBar());
        document.getElementById("ToggleLeft").style.display="inline";
    }
    
</SCRIPT>

<META content="MSHTML 6.00.2900.3492" name=GENERATOR></HEAD>
<BODY onload=load()>
<DIV id=TopBar>
<DIV id=TopBar_tr>
<DIV id=TopBar_tl>
<DIV id=TopBar_br>
<DIV id=TopBar_bl>
<DIV id=TopBar_right><A href="http://java.sun.com/javase/6/download.jsp" 
target=_blank>Download the JDK</A> <BR><A 
href="http://java.sun.com/docs/books/tutorial/search.html" target=_blank>Search 
the Tutorials</A> <BR><A id=ToggleLeft href="javascript:toggleLeft()">Hide the 
TOC</A> </DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class=PrintHeaders><B>Trail:</B> RMI </DIV>
<DIV class=LeftBar_shown id=LeftBar>
<DIV id=Contents>
<DIV class=nolinkAHEAD>An Overview of RMI Applications</DIV>
<DIV class=linkAHEAD><A 
href="http://java.sun.com/docs/books/tutorial/rmi/server.html">Writing an RMI 
Server</A></DIV>
<DIV class=linkBHEAD><A 
href="http://java.sun.com/docs/books/tutorial/rmi/designing.html">Designing a 
Remote Interface</A></DIV>
<DIV class=linkBHEAD><A 
href="http://java.sun.com/docs/books/tutorial/rmi/implementing.html">Implementing 
a Remote Interface</A></DIV>
<DIV class=linkAHEAD><A 
href="http://java.sun.com/docs/books/tutorial/rmi/client.html">Creating a Client 
Program</A></DIV>
<DIV class=linkAHEAD><A 
href="http://java.sun.com/docs/books/tutorial/rmi/example.html">Compiling and 
Running the Example</A></DIV>
<DIV class=linkBHEAD><A 
href="http://java.sun.com/docs/books/tutorial/rmi/compiling.html">Compiling the 
Example Programs</A></DIV>
<DIV class=linkBHEAD><A 
href="http://java.sun.com/docs/books/tutorial/rmi/running.html">Running the 
Example Programs</A></DIV></DIV></DIV>
<DIV class=MainFlow_indented id=MainFlow><SPAN id=BreadCrumbs><A 
href="http://java.sun.com/docs/books/tutorial/index.html" target=_top>Home 
Page</A> &gt; <A href="http://java.sun.com/docs/books/tutorial/rmi/index.html" 
target=_top>RMI</A> </SPAN>
<DIV class=NavBit><A href="http://java.sun.com/docs/books/tutorial/rmi/TOC.html" 
target=_top>«&nbsp;Previous</A>&nbsp;•&nbsp;<A 
href="http://java.sun.com/docs/books/tutorial/rmi/TOC.html" 
target=_top>Trail</A>&nbsp;•&nbsp;<A 
href="http://java.sun.com/docs/books/tutorial/rmi/server.html" 
target=_top>Next&nbsp;»</A> </DIV>
<DIV id=PageTitle>An Overview of RMI Applications</DIV>
<BLOCKQUOTE>RMI applications often comprise two separate programs, a server 
  and a client. A typical server program creates some remote objects, makes 
  references to these objects accessible, and waits for clients to invoke 
  methods on these objects. A typical client program obtains a remote reference 
  to one or more remote objects on a server and then invokes methods on them. 
  RMI provides the mechanism by which the server and the client communicate and 
  pass information back and forth. Such an application is sometimes referred to 
  as a <I>distributed object application</I>. 
  <P>Distributed object applications need to do the following: 
  <UL>
    <LI><B>Locate remote objects.</B> Applications can use various mechanisms to 
    obtain references to remote objects. For example, an application can 
    register its remote objects with RMI's simple naming facility, the RMI 
    registry. Alternatively, an application can pass and return remote object 
    references as part of other remote invocations. 
    <LI><B>Communicate with remote objects.</B> Details of communication between 
    remote objects are handled by RMI. To the programmer, remote communication 
    looks similar to regular Java method invocations. 
    <LI><B>Load class definitions for objects that are passed around.</B> 
    Because RMI enables objects to be passed back and forth, it provides 
    mechanisms for loading an object's class definitions as well as for 
    transmitting an object's data. </LI></UL>The following illustration depicts an 
  RMI distributed application that uses the RMI registry to obtain a reference 
  to a remote object. The server calls the registry to associate (or bind) a 
  name with a remote object. The client looks up the remote object by its name 
  in the server's registry and then invokes a method on it. The illustration 
  also shows that the RMI system uses an existing web server to load class 
  definitions, from server to client and from client to server, for objects when 
  needed. 
  <P>
  <CENTER><IMG height=181 alt="" 
  src="F01_An Overview of RMI Applications (The Java™ Tutorials  RMI)_files/rmi-2.gif" 
  width=355 align=bottom></CENTER>
  <P></P><A name=advantages></BLOCKQUOTE>
<H3>Advantages of Dynamic Code Loading</H3></A>
<BLOCKQUOTE>One of the central and unique features of RMI is its ability to 
  download the definition of an object's class if the class is not defined in 
  the receiver's Java virtual machine. All of the types and behavior of an 
  object, previously available only in a single Java virtual machine, can be 
  transmitted to another, possibly remote, Java virtual machine. RMI passes 
  objects by their actual classes, so the behavior of the objects is not changed 
  when they are sent to another Java virtual machine. This capability enables 
  new types and behaviors to be introduced into a remote Java virtual machine, 
  thus dynamically extending the behavior of an application. The compute engine 
  example in this trail uses this capability to introduce new behavior to a 
  distributed program. </BLOCKQUOTE><A name=remote>
<H3>Remote Interfaces, Objects, and Methods</H3></A>
<BLOCKQUOTE>Like any other Java application, a distributed application built 
  by using Java RMI is made up of interfaces and classes. The interfaces declare 
  methods. The classes implement the methods declared in the interfaces and, 
  perhaps, declare additional methods as well. In a distributed application, 
  some implementations might reside in some Java virtual machines but not 
  others. Objects with methods that can be invoked across Java virtual machines 
  are called <I>remote objects</I>. 
  <P>An object becomes remote by implementing a <I>remote interface</I>, which 
  has the following characteristics: 
  <UL>
    <LI>A remote interface extends the interface <CODE>java.rmi.Remote</CODE>. 
    <LI>Each method of the interface declares 
    <CODE>java.rmi.RemoteException</CODE> in its <CODE>throws</CODE> clause, in 
    addition to any application-specific exceptions. </LI></UL>
  <P>RMI treats a remote object differently from a non-remote object when the 
  object is passed from one Java virtual machine to another Java virtual 
  machine. Rather than making a copy of the implementation object in the 
  receiving Java virtual machine, RMI passes a remote <I>stub</I> for a remote 
  object. The stub acts as the local representative, or proxy, for the remote 
  object and basically is, to the client, the remote reference. The client 
  invokes a method on the local stub, which is responsible for carrying out the 
  method invocation on the remote object. 
  <P>A stub for a remote object implements the same set of remote interfaces 
  that the remote object implements. This property enables a stub to be cast to 
  any of the interfaces that the remote object implements. However, <I>only</I> 
  those methods defined in a remote interface are available to be called from 
  the receiving Java virtual machine. </P></BLOCKQUOTE><A name=creating>
<H3>Creating Distributed Applications by Using RMI</H3>
<BLOCKQUOTE>Using RMI to develop a distributed application involves these 
  general steps: 
  <OL>
    <LI>Designing and implementing the components of your distributed 
    application. 
    <LI>Compiling sources. 
    <LI>Making classes network accessible. 
    <LI>Starting the application. </LI></OL>
  <H3>Designing and Implementing the Application Components</H3>
  <BLOCKQUOTE>First, determine your application architecture, including which 
    components are local objects and which components are remotely accessible. 
    This step includes: 
    <UL>
      <LI><B>Defining the remote interfaces.</B> A remote interface specifies 
      the methods that can be invoked remotely by a client. Clients program to 
      remote interfaces, not to the implementation classes of those interfaces. 
      The design of such interfaces includes the determination of the types of 
      objects that will be used as the parameters and return values for these 
      methods. If any of these interfaces or classes do not yet exist, you need 
      to define them as well. 
      <LI><B>Implementing the remote objects.</B> Remote objects must implement 
      one or more remote interfaces. The remote object class may include 
      implementations of other interfaces and methods that are available only 
      locally. If any local classes are to be used for parameters or return 
      values of any of these methods, they must be implemented as well. 
      <LI><B>Implementing the clients.</B> Clients that use remote objects can 
      be implemented at any time after the remote interfaces are defined, 
      including after the remote objects have been deployed. </LI></UL></BLOCKQUOTE>
  <H3>Compiling Sources</H3>
  <BLOCKQUOTE>As with any Java program, you use the <CODE>javac</CODE> 
    compiler to compile the source files. The source files contain the 
    declarations of the remote interfaces, their implementations, any other 
    server classes, and the client classes. 
    <BLOCKQUOTE>
      <HR>
      <STRONG>Note:</STRONG>&nbsp;With versions prior to Java Platform, Standard 
      Edition 5.0, an additional step was required to build stub classes, by 
      using the <CODE>rmic</CODE> compiler. However, this step is no longer 
      necessary. 
      <HR>
    </BLOCKQUOTE></BLOCKQUOTE>
  <H3>Making Classes Network Accessible</H3>
  <BLOCKQUOTE>In this step, you make certain class definitions network 
    accessible, such as the definitions for the remote interfaces and their 
    associated types, and the definitions for classes that need to be downloaded 
    to the clients or servers. Classes definitions are typically made network 
    accessible through a web server. </BLOCKQUOTE>
  <H3>Starting the Application</H3>
  <BLOCKQUOTE>Starting the application includes running the RMI remote object 
    registry, the server, and the client. 
    <P>The rest of this section walks through the steps used to create a compute 
    engine. </P></BLOCKQUOTE></BLOCKQUOTE><A name=generic>
<H3>Building a Generic Compute Engine</H3>
<BLOCKQUOTE>This trail focuses on a simple, yet powerful, distributed 
  application called a <I>compute engine</I>. The compute engine is a remote 
  object on the server that takes tasks from clients, runs the tasks, and 
  returns any results. The tasks are run on the machine where the server is 
  running. This type of distributed application can enable a number of client 
  machines to make use of a particularly powerful machine or a machine that has 
  specialized hardware. 
  <P>The novel aspect of the compute engine is that the tasks it runs do not 
  need to be defined when the compute engine is written or started. New kinds of 
  tasks can be created at any time and then given to the compute engine to be 
  run. The only requirement of a task is that its class implement a particular 
  interface. The code needed to accomplish the task can be downloaded by the RMI 
  system to the compute engine. Then, the compute engine runs the task, using 
  the resources on the machine on which the compute engine is running. 
  <P>The ability to perform arbitrary tasks is enabled by the dynamic nature of 
  the Java platform, which is extended to the network by RMI. RMI dynamically 
  loads the task code into the compute engine's Java virtual machine and runs 
  the task without prior knowledge of the class that implements the task. Such 
  an application, which has the ability to download code dynamically, is often 
  called a <I>behavior-based application</I>. Such applications usually require 
  full agent-enabled infrastructures. With RMI, such applications are part of 
  the basic mechanisms for distributed computing on the Java platform. 
</P></BLOCKQUOTE>
<DIV class=NavBit><A href="http://java.sun.com/docs/books/tutorial/rmi/TOC.html" 
target=_top>« Previous</A> • <A 
href="http://java.sun.com/docs/books/tutorial/rmi/TOC.html" 
target=_top>Trail</A> • <A 
href="http://java.sun.com/docs/books/tutorial/rmi/server.html" target=_top>Next 
»</A> </DIV></DIV>
<DIV id=Footer>
<HR>

<DIV id=TagNotes><FONT face=sans-serif size=1>Problems with the examples? Try <A 
href="http://java.sun.com/docs/books/tutorial/information/run-examples.html" 
target=_blank>Compiling and Running the Examples: FAQs</A>. <BR>Complaints? 
Compliments? Suggestions? <A 
href="http://developer.sun.com/contact/tutorial_feedback.jsp" target=_blank>Give 
us your feedback</A>. </FONT></DIV>
<DIV id=Footer>
<P><FONT face=sans-serif size=1><A name=license_info>Your use of this</A> page 
<A 
href="http://java.sun.com/docs/books/tutorial/">(http://java.sun.com/docs/books/tutorial</A> 
(Last Updated <A 
href="http://java.sun.com/docs/books/tutorial/information/history.html">2/14/2008</A>)) 
and all the material on pages under "The Java Tutorials" banner is subject to 
the <A href="http://developers.sun.com/global/termsofuse.html#g2_12">Terms of 
Use</A>. Additionally, (i) any example code contained in any of these Java 
Tutorials pages is also licensed under the <A 
href="http://developers.sun.com/license/berkeley_license.html">Code Sample 
License</A>, and (ii) the entire Java Tutorials content is available for 
download under the Java Tutorials Limited Non-Commercial License for limited, 
non-commercial individual and/or research and instructional use at <A 
href="https://cds.sun.com/is-bin/INTERSHOP.enfinity/WFS/CDS-CDS_Developer-Site/en_US/-/USD/ViewProductDetail-Start?ProductRef=tutorial-2008_03_14-oth-JPR@CDS-CDS_Developer">Sun 
Download Center</A>.</FONT></P><!--
-->
<TABLE cellSpacing=0 cellPadding=5 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="20%">
      <TABLE cellSpacing=0 cellPadding=5 width="100%" border=0>
        <TBODY>
        <TR>
          <TD align=middle><IMG id=duke height=55 
            src="F01_An Overview of RMI Applications (The Java™ Tutorials  RMI)_files/DukeWave.gif" 
            width=55></TD>
          <TD vAlign=center align=left><IMG id=sun height=29 
            src="F01_An Overview of RMI Applications (The Java™ Tutorials  RMI)_files/logo_sun_small_sdn.gif" 
            width=61></TD></TR></TBODY></TABLE></TD>
    <TD vAlign=center align=middle width="55%"><FONT color=#7e9cb1 size=1><A 
      href="http://developers.sun.com/global/aboutsun.html">About Sun</A> | <A 
      href="http://developers.sun.com/global/aboutsdn.html">About This Site</A> 
      | <A href="http://developers.sun.com/global/termsofuse.html">Terms of 
      Use</A> | <A 
      href="http://developers.sun.com/global/trademarks.html">Trademarks</A></FONT><FONT 
      color=#7e9cb1>&nbsp;</FONT> </TD>
    <TD vAlign=center align=right width="25%"><FONT color=#4b7592 
      size=2><STRONG>A Sun Developer Network Site</STRONG></FONT><BR><FONT 
      size=1><A 
      href="http://java.sun.com/docs/books/tutorial/information/copyright.html">Copyright</A></FONT> 
      <FONT color=#4b7592 size=2>1995-2008 Sun Microsystems, Inc.</FONT> 
  </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=PrintHeaders><B>Previous page:</B> Table of Contents <BR><B>Next 
page:</B> Writing an RMI Server </DIV>
<SCRIPT language=JavaScript 
src="F01_An Overview of RMI Applications (The Java™ Tutorials  RMI)_files/s_code_remote.js"></SCRIPT>
</BODY></HTML>
