Linux UBUNTU 16:

//set env variables:

export JAVA_HOME=/opt/software/java/jdks/jdk1.8.0_161
#export CATALINA_HOME=/opt/software/apache-tomee-plume-7.0.4
export CATALINA_HOME=/opt/software/apache-tomcat-9.0.4
export PATH=$JAVA_HOME/bin:$CATALINA_HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
#export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$CATALINA_HOME/lib/servlet-api.jar
export CLASSPATH=".:$CATALINA_HOME/bin/bootstrap.jar:$CATALINA_HOME/bin/tomcat-juli.jar:$CATALINA_HOME/lib/*"
export DAD=/home/stud/dad/lectures

cd $DAD/c07


A. SOA - Web Services | JAX-WS

# 1. Stand alone JAX-WS server:
cd $DAD/c07/soa/s07_japp_jaxws_server/src
javac -d ../bin eu/ase/jaxws/*.java
cd ../bin
java -cp . eu.ase.jaxws.HelloWorldWSPub

# in Wizdler (G Chrome - icon near address bar): 
# http://127.0.0.1:8080/WS/HelloWorld?wsdl
# http://127.0.0.1:8080/WS/HelloWorld?xsd=1


# 2. SOA WS Client with JAX-WS (the program from point 1 MUST run) 
# & in another client terminal (as replacement for Wizdler):

cd $DAD/c07/soa/s07_japp_jaxwsClient/src
wsimport -s . http://127.0.0.1:8080/WS/HelloWorld?wsdl
javac eu/ase/jaxws/client/JAXWSClient.java
java eu.ase.jaxws.client.JAXWSClient

rm eu/ase/jaxws/client/JAXWSClient.class
rm -rf eu/ase/jaxws/*.class 
rm -rf eu/ase/jaxws/*.java

3. Web Server:
cd $DAD/c07/soa/s07_jweb_jaxws_server/src
javac -d ../build/classes eu/ase/webservice/*.java
cd ..
wsgen -s src -d build/classes -cp build/classes eu.ase.webservice.HelloWorldImpl

mkdir -p bin
cd bin
cp -R ../WebContent/* .
cp -R ../build/classes ./WEB-INF

jar -cvf S009SOAJAXWS.war *.html WEB-INF/lib/*.jar WEB-INF/classes/eu/ase/webservice/* WEB-INF/*.xml
cp ./S009SOAJAXWS.war $CATALINA_HOME/webapps/S009SOAJAXWS.war

# Start & Stop web server Apache Tomcat 7 / 8 / 9 / TomEE:

$CATALINA_HOME/bin/startup.sh
# $CATALINA_HOME/bin/shutdown.sh

# in Wizdler (G Chrome - icon near address bar):
# http://localhost:8080/S009SOAJAXWS/HelloWorldWS
# http://127.0.0.1:8080/S009SOAJAXWS/HelloWorldWS
# http://127.0.0.1:8080/S009SOAJAXWS/HelloWorldWS?wsdl

$CATALINA_HOME/bin/shutdown.sh

rm -rf $CATALINA_HOME/webapps/S009SOAJAXWS.war
rm -rf $CATALINA_HOME/webapps/S009SOAJAXWS

cd $DAD/c07/soa/s07_jweb_jaxws_server
rm ./bin/S009SOAJAXWS.war
rm -rf ./bin



B. Processes Migration - "naive business logic code/bytecode" sending for "migration"
# IT is NOT correct in terms or PROCESS migration |  the process migration is not a trivial thing
# e.g. a VM/Container instance/image saved and migrated and restored are examples of
# seet of processes migrated in "how swap" mode
# for replacement of the JAR dynamic loading please refer Java OSGi

#*** in Server-Client paradigm


#in 2 terminals after enetering the env variables
cd $DAD/c07/procmigration/tasks/
javac euasepmigration/*.java
jar -cvf tasks.jar euasepmigration/*.class
cp tasks.jar ../client

cd $DAD/c07/procmigration/client
javac euasepmigration/Client.java

# compile server in another terminal
cd $DAD/c07/procmigration/server
javac euasepmigration/Server4Tasks.java
java euasepmigration.Server4Tasks

#comeback in initial terminal
java euasepmigration.Client 127.0.0.1 4805

# please see the client timeout because of Async Socket Channel from NIO

C. OpenMPI - Messages Passing Interface
# download and extract Open-MPI
# https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.2.tar.gz
# or in Linux Ubuntu 16:
sudo apt-get install openmpi-bin openmpi-common libopenmpi1.10 libopenmpi-dev
#sudo apt-get install openmpi-bin openmpi-common openssh-client openssh-server libopenmpi1.10 libopenmpi-dev


############################################################################
# in Amazon Linux (RHEL) in EC2 Cluster:

# in Browser (e.g. Google Chrome)
# https://us-east-2.console.aws.amazon.com/console/home?region=us-east-2#
# secitc@gmail.com

https://console.aws.amazon.com/ecs/
https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/clusters
https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/clusters/create/new
# create key pair
https://us-east-2.console.aws.amazon.com/ec2/v2/home?region=us-east-2#KeyPairs:sort=keyName
https://us-east-2.console.aws.amazon.com/ec2/v2/home?region=us-east-2#KeyPairs:


# in terminal MacOS/Linux - cd ~/Downloads
chmod 400 clusterAwsEc2_01.pem
ssh -i "clusterAwsEc2_01.pem" root@ec2-3-135-9-20.us-east-2.compute.amazonaws.com
ssh -i "clusterAwsEc2_01.pem" ec2-user@ec2-3-135-9-20.us-east-2.compute.amazonaws.com

ssh -i "clusterAwsEc2_01.pem" ec2-user@ec2-18-216-192-115.us-east-2.compute.amazonaws.com


https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa-start.html#efa-start-impi
https://us-east-2.console.aws.amazon.com/ec2/v2/home?region=us-east-2#Instances:sort=instanceId


ssh -i "clusterAwsEc2_01.pem" ec2-user@ec2-18-191-38-27.us-east-2.compute.amazonaws.com
ssh -i "clusterAwsEc2_01.pem" ec2-user@ec2-3-14-14-180.us-east-2.compute.amazonaws.com

# https://glennklockwood.blogspot.com/2013/04/quick-mpi-cluster-setup-on-amazon-ec2.html

# sudo yum provides */mpicc
# sudo yum install openmpi
# ls -latr /usr/lib64/openmpi
# sudo yum install openmpi-devel
# create the C code with source testmpi.c:

#include <mpi.h>
#include <stdio.h>
/*
#include <stdio.h>
#include <mpi.h>

main(int argc, char **argv)
{
   int node;
   MPI_Init(&argc,&argv);
   MPI_Comm_rank(MPI_COMM_WORLD, &node);
   printf("Hello World from Node %d\n",node);
   MPI_Finalize();
}
*/


int main(int argc, char** argv) {
    // Initialize the MPI environment
    MPI_Init(NULL, NULL);

    // Get the number of processes
    int world_size;
    MPI_Comm_size(MPI_COMM_WORLD, &world_size);

    // Get the rank of the process
    int world_rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);

    // Get the name of the processor
    char processor_name[MPI_MAX_PROCESSOR_NAME];
    int name_len;
    MPI_Get_processor_name(processor_name, &name_len);

    // Print off a hello world message
    printf("Hello world from processor %s, rank %d out of %d processors\n",
           processor_name, world_rank, world_size);

    // Finalize the MPI environment.
    MPI_Finalize();
}

# /usr/lib64/openmpi/bin/mpicc testopenmpi.c -o testopenmpi
# /usr/lib64/openmpi/bin/mpirun ./testopenmpi

mpirun -np 2 -hostfile ~/nodefile ./testopenmpi


############################################################################

cd $DAD/c07/openmpi
mpicc testmpi.c -o testmpi
mpirun ./testmpi
# vs.
./testmpi

mpicc testsend_recv.c -o testsend_recv
mpirun ./testsend_recv

